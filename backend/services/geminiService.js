const { GoogleGenerativeAI } = require("@google/generative-ai");
const fetch = require('node-fetch');
const { Headers } = require('node-fetch');
const fs = require('fs');
require('dotenv').config();

class GeminiService {
  constructor() {
    console.log('Initializing GeminiService...');
    
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is not configured');
    }

    try {
      // Th√™m fetch v√† Headers v√†o global scope
      if (!globalThis.fetch) {
        globalThis.fetch = fetch;
      }
      if (!globalThis.Headers) {
        globalThis.Headers = Headers;
      }
      
      this.genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
      this.model = this.genAI.getGenerativeModel({
        model: "gemini-2.0-flash-001",
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 0.8,
          maxOutputTokens: 1000,
          candidateCount: 1,
          stopSequences: ["Human:", "Assistant:"]
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE",
          }
        ],
        callOptions: {
          timeout: 30000,
          apiVersion: "v2"
        }
      });
      console.log('Gemini service initialized successfully');

      // Kh·ªüi t·∫°o model vision
      this.visionModel = this.genAI.getGenerativeModel({
        model: "gemini-pro-vision",
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 0.8,
          maxOutputTokens: 1000
        }
      });
    } catch (error) {
      console.error('Failed to initialize Gemini service:', error);
      throw error;
    }

    // M·ªü r·ªông t·ª´ kh√≥a l·ªãch s·ª≠ Vi·ªát Nam
    this.vietnamHistoryKeywords = [
      // Th·ªùi k·ª≥ l·ªãch s·ª≠
      'vi·ªát nam', 'ƒë·∫°i vi·ªát', '√¢u l·∫°c', 'vƒÉn lang', 'ƒë·∫°i c·ªì vi·ªát', 'ƒë·∫°i nam',
      'h·ªìng b√†ng', 'th·ªùi ti·ªÅn s·ª≠', 'th·ªùi k·ª≥ ƒë·ªì ƒë·ªìng', 'th·ªùi k·ª≥ ƒë·ªì s·∫Øt',
      
      // Tri·ªÅu ƒë·∫°i v√† ch·∫ø ƒë·ªô
      'tri·ªÅu ƒë·∫°i', 'v∆∞∆°ng qu·ªëc', 'phong ki·∫øn', 'qu√¢n ch·ªß', 'ch·∫ø ƒë·ªô',
      'nh√† l√Ω', 'nh√† tr·∫ßn', 'nh√† h·ªì', 'nh√† l√™', 'nh√† nguy·ªÖn', 'nh√† m·∫°c',
      
      // S·ª± ki·ªán v√† hi·ªán t∆∞·ª£ng
      'ƒë·ªôc l·∫≠p', 't·ª± ch·ªß', 'kh·ªüi nghƒ©a', 'chi·∫øn tranh', 'kh√°ng chi·∫øn',
      'gi·∫£i ph√≥ng', 'c√°ch m·∫°ng', 'phong tr√†o', 'b·∫Øc thu·ªôc', 'ƒë√¥ h·ªô',
      'chi·∫øn th·∫Øng', 'th·∫•t b·∫°i', 'h√≤a ∆∞·ªõc', 'hi·ªáp ƒë·ªãnh',
      
      // VƒÉn h√≥a v√† x√£ h·ªôi
      'vƒÉn h√≥a', 'phong t·ª•c', 'truy·ªÅn th·ªëng', 'di s·∫£n', 'di t√≠ch',
      't√≠n ng∆∞·ª°ng', 't√¥n gi√°o', 'l·ªÖ h·ªôi', 'phong t·ª•c t·∫≠p qu√°n',
      'ki·∫øn tr√∫c', 'ngh·ªá thu·∫≠t', 'vƒÉn h·ªçc', 'gi√°o d·ª•c',
      
      // Nh√¢n v·∫≠t v√† ch·ª©c danh
      'vua', 'ho√†ng ƒë·∫ø', 'ch√∫a', 't∆∞·ªõng', 'anh h√πng', 'l√£nh ƒë·∫°o',
      'danh nh√¢n', 'danh t∆∞·ªõng', 'vƒÉn th√¢n', 'sƒ© phu', 'quan l·∫°i'
    ];
  }

  async analyzeHistory(question, retries = 3) {
    try {
      console.log('Analyzing question:', question);

      if (!question?.trim()) {
        throw new Error('C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      let lastError;
      for (let i = 0; i < retries; i++) {
        try {
          const prompt = `
            H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau v·ªÅ l·ªãch s·ª≠ Vi·ªát Nam m·ªôt c√°ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† hi·ªán ƒë·∫°i:
            "${question}"

            Y√™u c·∫ßu format:
            üí° C√¢u tr·∫£ l·ªùi ch√≠nh (ng·∫Øn g·ªçn 2-3 c√¢u)

            üìÖ S·ª± ki·ªán quan tr·ªçng:
            ‚Ä¢ [T√™n s·ª± ki·ªán] ([Th·ªùi gian])
            
            üë• Nh√¢n v·∫≠t li√™n quan:
            ‚Ä¢ [T√™n nh√¢n v·∫≠t] - [Vai tr√≤ ng·∫Øn g·ªçn]

            üíé ƒêi·ªÉm ƒë√°ng ch√∫ √Ω:
            ‚Ä¢ [1-2 ƒëi·ªÉm th√∫ v·ªã ho·∫∑c b√†i h·ªçc r√∫t ra]

            H√£y tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu v√† c√≥ t√≠nh gi√°o d·ª•c.
          `;

          console.log(`Attempt ${i + 1} of ${retries}`);
          const result = await this.model.generateContent(prompt);
          
          if (!result) {
            throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini');
          }

          const response = await result.response;
          const text = response.text();

          if (!text) {
            throw new Error('Ph·∫£n h·ªìi t·ª´ Gemini tr·ªëng');
          }

          console.log('Raw Gemini response:', text);

          // Parse response
          const sections = text.split('\n\n');
          const answer = sections[0]?.replace('üí° ', '')?.trim() || text;
          
          const events = [];
          const figures = [];

          sections.forEach(section => {
            if (section.includes('üìÖ')) {
              const lines = section.split('\n');
              lines.forEach(line => {
                if (line.startsWith('‚Ä¢')) {
                  const match = line.match(/‚Ä¢ (.*?) \((.*?)\)/);
                  if (match) {
                    events.push({
                      id: this.generateId(),
                      title: match[1].trim(),
                      date: match[2].trim()
                    });
                  }
                }
              });
            } else if (section.includes('üë•')) {
              const lines = section.split('\n');
              lines.forEach(line => {
                if (line.startsWith('‚Ä¢')) {
                  const match = line.match(/‚Ä¢ (.*?) - (.*)/);
                  if (match) {
                    figures.push({
                      id: this.generateId(),
                      name: match[1].trim(),
                      role: match[2].trim()
                    });
                  }
                }
              });
            }
          });

          return {
            success: true,
            answer,
            events,
            figures,
            highlights: sections.find(s => s.includes('üíé'))
              ?.split('\n')
              ?.filter(l => l.startsWith('‚Ä¢'))
              ?.map(l => l.replace('‚Ä¢ ', '').trim()) || []
          };
        } catch (error) {
          console.error(`Attempt ${i + 1} failed:`, error);
          lastError = error;
          if (i < retries - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1))); // Exponential backoff
            continue;
          }
        }
      }

      console.error('Gemini analysis error:', lastError);
      return {
        success: false,
        error: lastError.message,
        answer: 'Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n.',
        events: [],
        figures: [],
        highlights: []
      };

    } catch (error) {
      console.error('Error in analyzeHistory:', error);
      return {
        success: false,
        error: error.message,
        answer: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.',
        events: [],
        figures: [],
        highlights: []
      };
    }
  }

  isVietnamHistoryQuestion(question) {
    const normalizedQuestion = question.toLowerCase();
    return this.vietnamHistoryKeywords.some(keyword => 
      normalizedQuestion.includes(keyword.toLowerCase())
    );
  }

  async findRelevantImages(question) {
    // Implement image search logic here
    // C√≥ th·ªÉ s·ª≠ d·ª•ng Google Custom Search API ho·∫∑c c√°c service kh√°c
    return []; // T·∫°m th·ªùi return array r·ªóng
  }

  generateId() {
    return Math.random().toString(36).substr(2, 9);
  }

  // Th√™m h√†m x·ª≠ l√Ω h√¨nh ·∫£nh
  async analyzeImage(imageFile, question) {
    try {
      if (!imageFile?.buffer) {
        throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h√¨nh ·∫£nh');
      }

      // Chuy·ªÉn buffer sang base64
      const imageBase64 = imageFile.buffer.toString('base64');
      const mimeType = imageFile.mimetype;

      // T·∫°o prompt cho vision model
      const prompt = `
        H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr·∫£ l·ªùi c√¢u h·ªèi sau:
        "${question}"

        Y√™u c·∫ßu format:
        üí° M√¥ t·∫£ h√¨nh ·∫£nh (2-3 c√¢u)

        üìù Tr·∫£ l·ªùi c√¢u h·ªèi:
        ‚Ä¢ [C√¢u tr·∫£ l·ªùi chi ti·∫øt]

        üîç Chi ti·∫øt quan tr·ªçng:
        ‚Ä¢ [Li·ªát k√™ c√°c chi ti·∫øt ƒë√°ng ch√∫ √Ω trong h√¨nh]

        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu.
      `;

      // G·ªçi vision model
      const result = await this.visionModel.generateContent([
        prompt,
        {
          inlineData: {
            data: imageBase64,
            mimeType: mimeType
          }
        }
      ]);

      const response = await result.response;
      const text = response.text();

      // Parse response
      const sections = text.split('\n\n');
      return {
        success: true,
        description: sections[0]?.replace('üí° ', '')?.trim(),
        answer: sections[1]?.replace('üìù ', '')?.trim(),
        details: sections[2]?.replace('üîç ', '')?.split('\n')
          ?.filter(l => l.startsWith('‚Ä¢'))
          ?.map(l => l.replace('‚Ä¢ ', '').trim()) || []
      };

    } catch (error) {
      console.error('Vision analysis error:', error);
      return {
        success: false,
        error: error.message,
        description: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh',
        answer: 'Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi v·ªõi h√¨nh ·∫£nh n√†y',
        details: []
      };
    }
  }
}

module.exports = new GeminiService(); 